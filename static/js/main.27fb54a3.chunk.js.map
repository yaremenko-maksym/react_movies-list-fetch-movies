{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api/api.ts","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","FindMovie","previewMovie","setPreviewMovie","setMovies","setTitleQuery","titleQuery","getMovieFromServer","isFindErrorVisible","setFindErrorVisible","isMovieRepeat","checkMovieRepeat","setMovieRepeat","isInputEmpty","input","trim","handleFindButton","a","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","target","length","match","onClick","prevValue","getMovieByTitle","filter","fetch","response","json","App","useState","some","newMovie","Response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27fb54a3.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <ul className=\"movies\">\n      {movies.map(movie => (\n        <li key={movie.imdbID}>\n          <MovieCard\n            key={movie.imdbID}\n            movie={movie}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  previewMovie: Movie | null;\n  setPreviewMovie: React.Dispatch<React.SetStateAction<Movie | null>>;\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n  setTitleQuery: React.Dispatch<React.SetStateAction<string>>;\n  titleQuery: string;\n  getMovieFromServer: () => Promise<void>;\n  isFindErrorVisible: boolean;\n  setFindErrorVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isMovieRepeat: boolean;\n  checkMovieRepeat: (title: string) => boolean;\n  setMovieRepeat: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  previewMovie,\n  setPreviewMovie,\n  setMovies,\n  setTitleQuery,\n  titleQuery,\n  getMovieFromServer,\n  isFindErrorVisible,\n  setFindErrorVisible,\n  isMovieRepeat,\n  checkMovieRepeat,\n  setMovieRepeat,\n}) => {\n  const isInputEmpty = (input: string) => {\n    return !input.trim();\n  };\n\n  const isInputValid = (input: string) => {\n    return input.match(/[A-Za-z0-9А-Яа-я ]/g);\n  };\n\n  const handleFindButton = async () => {\n    if (isInputEmpty(titleQuery)) {\n      setFindErrorVisible(true);\n\n      return;\n    }\n\n    if (previewMovie && previewMovie.Title === titleQuery) {\n      return;\n    }\n\n    await getMovieFromServer();\n  };\n\n  const handleAddMovieButton = () => {\n    if (!previewMovie) {\n      return;\n    }\n\n    if (checkMovieRepeat(previewMovie.imdbID)) {\n      setMovieRepeat(true);\n\n      return;\n    }\n\n    setMovies((prevValue) => [...prevValue, previewMovie]);\n    setTitleQuery('');\n    setPreviewMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(e) => e.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                { 'is-danger': isFindErrorVisible || isMovieRepeat },\n              )}\n              value={titleQuery}\n              onChange={({ target }) => {\n                const { value } = target;\n\n                if (isInputEmpty(value)) {\n                  setTitleQuery('');\n\n                  return;\n                }\n\n                if (!isInputValid(value[value.length - 1])) {\n                  return;\n                }\n\n                setMovieRepeat(false);\n                setFindErrorVisible(false);\n                setTitleQuery(value);\n              }}\n            />\n          </div>\n\n          {isFindErrorVisible && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {isMovieRepeat && (\n            <p className=\"help is-danger\">\n              This movie already in the list\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                { 'is-primary': !isFindErrorVisible },\n                { 'is-light': isFindErrorVisible },\n              )}\n              onClick={handleFindButton}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                { 'is-primary': previewMovie },\n                { 'is-light': !previewMovie },\n              )}\n              onClick={handleAddMovieButton}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {previewMovie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={previewMovie}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","const BASE_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=d963d90b&';\n\nexport const getMovieByTitle = async (filter: string) => {\n  const response = await fetch(`${BASE_URL}t=[${filter}]`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nimport { getMovieByTitle } from './api/api';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [titleQuery, setTitleQuery] = useState('');\n  const [previewMovie, setPreviewMovie] = useState<Movie | null>(null);\n  const [isFindErrorVisible, setFindErrorVisible] = useState(false);\n  const [isMovieRepeat, setMovieRepeat] = useState(false);\n\n  const checkMovieRepeat = (id: string) => {\n    return movies.some(movie => movie.imdbID === id);\n  };\n\n  const getMovieFromServer = async () => {\n    const newMovie = await getMovieByTitle(titleQuery);\n\n    if (newMovie.Response === 'False') {\n      setPreviewMovie(null);\n      setFindErrorVisible(true);\n\n      return;\n    }\n\n    if (checkMovieRepeat(newMovie.Title)) {\n      setMovieRepeat(true);\n\n      return;\n    }\n\n    setPreviewMovie(newMovie);\n    setFindErrorVisible(false);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movies}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          previewMovie={previewMovie}\n          setPreviewMovie={setPreviewMovie}\n          setMovies={setMovies}\n          setTitleQuery={setTitleQuery}\n          titleQuery={titleQuery}\n          getMovieFromServer={getMovieFromServer}\n          isFindErrorVisible={isFindErrorVisible}\n          setFindErrorVisible={setFindErrorVisible}\n          isMovieRepeat={isMovieRepeat}\n          setMovieRepeat={setMovieRepeat}\n          checkMovieRepeat={checkMovieRepeat}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}