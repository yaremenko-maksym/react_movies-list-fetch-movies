{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","src","Poster","alt","Title","Plot","MoviesList","movies","map","imdbID","getMovieByTitle","filter","a","fetch","response","json","FindMovie","setMovies","checkMovieRepeat","useState","isFindErrorVisible","setFindErrorVisible","isMovieRepeat","setMovieRepeat","titleQuery","setTitleQuery","previewMovie","setPreviewMovie","getMovieFromServer","useCallback","newMovie","Response","isInputEmpty","input","trim","isInputValid","match","handleFilterChange","value","length","handleFindButton","handleAddMovieButton","prevValue","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","classNames","onChange","target","onClick","App","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8aec1a9.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={movie.Poster}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <ul className=\"movies\">\n      {movies.map(movie => (\n        <li key={movie.imdbID}>\n          <MovieCard\n            key={movie.imdbID}\n            movie={movie}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","const BASE_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=d963d90b&';\n\nexport const getMovieByTitle = async (filter: string) => {\n  const response = await fetch(`${BASE_URL}t=[${filter}]`);\n\n  return response.json();\n};\n","import React, { useCallback, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovieByTitle } from '../../api/api';\n\ntype Props = {\n  setMovies: React.Dispatch<React.SetStateAction<Movie[]>>;\n  checkMovieRepeat: (title: string) => boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  setMovies,\n  checkMovieRepeat,\n}) => {\n  const [isFindErrorVisible, setFindErrorVisible] = useState(false);\n  const [isMovieRepeat, setMovieRepeat] = useState(false);\n  const [titleQuery, setTitleQuery] = useState('');\n  const [previewMovie, setPreviewMovie] = useState<Movie | null>(null);\n\n  const getMovieFromServer = useCallback(async () => {\n    const newMovie = await getMovieByTitle(titleQuery);\n\n    if (newMovie.Response === 'False') {\n      setPreviewMovie(null);\n      setFindErrorVisible(true);\n\n      return;\n    }\n\n    if (checkMovieRepeat(newMovie.Title)) {\n      setMovieRepeat(true);\n\n      return;\n    }\n\n    setPreviewMovie(newMovie);\n    setFindErrorVisible(false);\n  }, [titleQuery]);\n\n  const isInputEmpty = useCallback((input: string) => {\n    return !input.trim();\n  }, []);\n\n  const isInputValid = useCallback((input: string) => {\n    return input.match(/[A-Za-z0-9А-Яа-я .,!?-]/g);\n  }, []);\n\n  const handleFilterChange = useCallback((value: string) => {\n    if (isInputEmpty(value)) {\n      setTitleQuery('');\n\n      return;\n    }\n\n    if (!isInputValid(value[value.length - 1])) {\n      return;\n    }\n\n    setMovieRepeat(false);\n    setFindErrorVisible(false);\n    setTitleQuery(value);\n  }, []);\n\n  const handleFindButton = useCallback(async () => {\n    if (isInputEmpty(titleQuery)) {\n      setFindErrorVisible(true);\n\n      return;\n    }\n\n    if (previewMovie && previewMovie.Title === titleQuery) {\n      return;\n    }\n\n    await getMovieFromServer();\n  }, [getMovieFromServer, titleQuery, previewMovie]);\n\n  const handleAddMovieButton = useCallback(() => {\n    if (!previewMovie) {\n      return;\n    }\n\n    if (checkMovieRepeat(previewMovie.imdbID)) {\n      setMovieRepeat(true);\n\n      return;\n    }\n\n    setMovies((prevValue) => [...prevValue, previewMovie]);\n    setTitleQuery('');\n    setPreviewMovie(null);\n  }, [previewMovie]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(e) => e.preventDefault()}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                { 'is-danger': isFindErrorVisible || isMovieRepeat },\n              )}\n              value={titleQuery}\n              onChange={({ target }) => handleFilterChange(target.value)}\n            />\n          </div>\n\n          {isFindErrorVisible && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {isMovieRepeat && (\n            <p className=\"help is-danger\">\n              This movie already in the list\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                { 'is-primary': !isFindErrorVisible },\n                { 'is-light': isFindErrorVisible },\n              )}\n              onClick={handleFindButton}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                { 'is-primary': previewMovie },\n                { 'is-light': !previewMovie },\n              )}\n              onClick={handleAddMovieButton}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {previewMovie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard\n            movie={previewMovie}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const checkMovieRepeat = useCallback((id: string) => {\n    return movies.some(movie => movie.imdbID === id);\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movies}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          setMovies={setMovies}\n          checkMovieRepeat={checkMovieRepeat}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}